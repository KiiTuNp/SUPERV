#!/bin/bash

# =============================================================================
# Test de Validation de la Configuration HTTPS Robuste
# =============================================================================

set -euo pipefail

# Couleurs
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

test_nginx_config_robustness() {
    echo -e "${BLUE}[TEST]${NC} Validation de la configuration nginx robuste..."
    
    # Test de la syntaxe nginx
    if docker run --rm -v "$(pwd)/nginx/nginx.conf:/etc/nginx/nginx.conf:ro" nginx nginx -t 2>&1; then
        echo -e "${GREEN}‚úì${NC} Configuration nginx syntaxiquement valide"
    else
        echo -e "${RED}‚úó${NC} Configuration nginx invalide"
        return 1
    fi
    
    # V√©rifier les configurations de fallback
    local config_checks=(
        "ssl_certificate.*nginx-selfsigned.crt"
        "ssl_certificate_key.*nginx-selfsigned.key"
        "location @ssl_fallback"
        "if.*letsencrypt.*fullchain.pem"
        "return 302 http"
    )
    
    for check in "${config_checks[@]}"; do
        if grep -q "$check" nginx/nginx.conf; then
            echo -e "${GREEN}‚úì${NC} Configuration fallback SSL pr√©sente: $check"
        else
            echo -e "${YELLOW}‚ö†${NC} Configuration fallback manquante: $check"
        fi
    done
    
    echo -e "${GREEN}‚úì${NC} Configuration nginx robuste valid√©e"
    return 0
}

test_deployment_script_robustness() {
    echo -e "${BLUE}[TEST]${NC} Validation de la robustesse du script de d√©ploiement..."
    
    # V√©rifier les fonctions critiques
    local critical_functions=(
        "validate_web_accessibility"
        "wait_for_service_advanced"
        "configure_ssl_robust"
        "show_deployment_summary_complete"
    )
    
    for func in "${critical_functions[@]}"; do
        if grep -q "^$func()" deploy-production.sh; then
            echo -e "${GREEN}‚úì${NC} Fonction critique pr√©sente: $func"
        else
            echo -e "${RED}‚úó${NC} Fonction critique manquante: $func"
            return 1
        fi
    done
    
    # V√©rifier les validations de s√©curit√©
    local security_checks=(
        "validation.*DNS"
        "success_rate.*70"
        "HTTP_ACCESSIBLE.*true"
        "HTTPS_ACCESSIBLE.*true"
        "SSL_GENERATED.*true"
    )
    
    for check in "${security_checks[@]}"; do
        if grep -q "$check" deploy-production.sh; then
            echo -e "${GREEN}‚úì${NC} Validation de s√©curit√© pr√©sente: $check"
        else
            echo -e "${YELLOW}‚ö†${NC} Validation de s√©curit√© √† v√©rifier: $check"
        fi
    done
    
    echo -e "${GREEN}‚úì${NC} Script de d√©ploiement robuste valid√©"
    return 0
}

test_ssl_fallback_mechanism() {
    echo -e "${BLUE}[TEST]${NC} Test des m√©canismes de fallback SSL..."
    
    # V√©rifier les certificats auto-sign√©s
    if [[ -f "nginx/ssl/nginx-selfsigned.crt" && -f "nginx/ssl/nginx-selfsigned.key" ]]; then
        echo -e "${GREEN}‚úì${NC} Certificats auto-sign√©s de fallback pr√©sents"
    else
        echo -e "${YELLOW}‚ö†${NC} Certificats auto-sign√©s manquants - g√©n√©ration..."
        if [[ -x "nginx/ssl/generate-self-signed.sh" ]]; then
            cd nginx/ssl && ./generate-self-signed.sh
            cd ../..
            echo -e "${GREEN}‚úì${NC} Certificats auto-sign√©s g√©n√©r√©s"
        else
            echo -e "${RED}‚úó${NC} Script de g√©n√©ration de certificats manquant"
            return 1
        fi
    fi
    
    # Test de la logique de fallback dans docker-compose
    if grep -q "ssl_certificate.*nginx-selfsigned" nginx/nginx.conf; then
        echo -e "${GREEN}‚úì${NC} Configuration SSL fallback dans nginx"
    else
        echo -e "${RED}‚úó${NC} Configuration SSL fallback manquante"
        return 1
    fi
    
    echo -e "${GREEN}‚úì${NC} M√©canismes de fallback SSL valid√©s"
    return 0
}

test_accessibility_validation() {
    echo -e "${BLUE}[TEST]${NC} Validation des tests d'accessibilit√© web..."
    
    # V√©rifier que le script teste vraiment l'accessibilit√©
    local accessibility_tests=(
        "curl.*health.*nginx"
        "HTML.*detected"
        "success_rate.*70"
        "HTTP_ACCESSIBLE.*true"
        "Application.*charg√©e"
    )
    
    for test in "${accessibility_tests[@]}"; do
        if grep -q "$test" deploy-production.sh; then
            echo -e "${GREEN}‚úì${NC} Test d'accessibilit√© pr√©sent: $test"
        else
            echo -e "${YELLOW}‚ö†${NC} Test d'accessibilit√© √† v√©rifier: $test"
        fi
    done
    
    # V√©rifier les timeouts et retry mechanisms
    local timeout_configs=(
        "WEB_ACCESSIBILITY_TIMEOUT.*120"
        "SSL_VERIFICATION_TIMEOUT.*300"
        "attempt.*3"
        "max_ssl_attempts.*3"
    )
    
    for timeout in "${timeout_configs[@]}"; do
        if grep -q "$timeout" deploy-production.sh; then
            echo -e "${GREEN}‚úì${NC} Configuration timeout pr√©sente: $timeout"
        else
            echo -e "${YELLOW}‚ö†${NC} Configuration timeout manquante: $timeout"
        fi
    done
    
    echo -e "${GREEN}‚úì${NC} Tests d'accessibilit√© valid√©s"
    return 0
}

test_error_handling() {
    echo -e "${BLUE}[TEST]${NC} Validation de la gestion d'erreur robuste..."
    
    # V√©rifier les gestion d'erreurs
    local error_handlers=(
        "set -euo pipefail"
        "cleanup_on_exit"
        "trap.*cleanup_on_exit"
        "return 1"
        "exit 1"
    )
    
    for handler in "${error_handlers[@]}"; do
        if grep -q "$handler" deploy-production.sh; then
            echo -e "${GREEN}‚úì${NC} Gestion d'erreur pr√©sente: $handler"
        else
            echo -e "${RED}‚úó${NC} Gestion d'erreur manquante: $handler"
            return 1
        fi
    done
    
    # V√©rifier les messages d'erreur informatifs
    if grep -qE "(log.*ERROR|echo.*ERROR|RED.*ERROR)" deploy-production.sh; then
        echo -e "${GREEN}‚úì${NC} Messages d'erreur informatifs pr√©sents"
    else
        echo -e "${YELLOW}‚ö†${NC} Messages d'erreur √† am√©liorer"
    fi
    
    echo -e "${GREEN}‚úì${NC} Gestion d'erreur robuste valid√©e"
    return 0
}

test_documentation_completeness() {
    echo -e "${BLUE}[TEST]${NC} Validation de la documentation compl√®te..."
    
    # V√©rifier les fichiers de documentation
    local docs=(
        "README.md"
        "GUIDE_DEPLOIEMENT_PRODUCTION.md"
        "FRONTEND_OPTIMIZATION_REPORT.md"
        "INDEX_SCRIPTS.md"
    )
    
    for doc in "${docs[@]}"; do
        if [[ -f "$doc" ]]; then
            local word_count=$(wc -w < "$doc")
            if [[ $word_count -gt 500 ]]; then
                echo -e "${GREEN}‚úì${NC} Documentation compl√®te: $doc ($word_count mots)"
            else
                echo -e "${YELLOW}‚ö†${NC} Documentation courte: $doc ($word_count mots)"
            fi
        else
            echo -e "${RED}‚úó${NC} Documentation manquante: $doc"
            return 1
        fi
    done
    
    # V√©rifier le README pour les √©l√©ments essentiels
    local readme_elements=(
        "D√©ploiement Production"
        "Architecture Technique"
        "S√©curit√©"
        "Performance"
        "D√©pannage"
    )
    
    for element in "${readme_elements[@]}"; do
        if grep -q "$element" README.md; then
            echo -e "${GREEN}‚úì${NC} √âl√©ment README pr√©sent: $element"
        else
            echo -e "${YELLOW}‚ö†${NC} √âl√©ment README manquant: $element"
        fi
    done
    
    echo -e "${GREEN}‚úì${NC} Documentation compl√®te valid√©e"
    return 0
}

show_robustness_summary() {
    echo
    echo "================================================="
    echo "üõ°Ô∏è  R√âSUM√â DE LA ROBUSTESSE DU SYST√àME"
    echo "================================================="
    echo
    echo "‚úÖ Configuration HTTPS avec fallbacks multiples"
    echo "‚úÖ Script de d√©ploiement avec validation compl√®te"
    echo "‚úÖ Tests d'accessibilit√© web avant confirmation"
    echo "‚úÖ M√©canismes de retry et timeouts configur√©s"
    echo "‚úÖ Gestion d'erreur robuste avec nettoyage"
    echo "‚úÖ Documentation compl√®te et d√©taill√©e"
    echo
    echo "üîí Points de S√©curit√© :"
    echo "   ‚Ä¢ Certificats SSL avec fallback auto-sign√©"
    echo "   ‚Ä¢ Validation DNS avant g√©n√©ration SSL"
    echo "   ‚Ä¢ Tests d'accessibilit√© HTTP et HTTPS"
    echo "   ‚Ä¢ Timeouts configur√©s pour √©viter les blocages"
    echo "   ‚Ä¢ Messages d'erreur informatifs pour le debug"
    echo
    echo "üìä M√©triques de Robustesse :"
    echo "   ‚Ä¢ 3 tentatives SSL automatiques"
    echo "   ‚Ä¢ 70% minimum de success rate pour validation"
    echo "   ‚Ä¢ 120s timeout pour accessibilit√© web"
    echo "   ‚Ä¢ Fallback HTTP si HTTPS √©choue"
    echo "   ‚Ä¢ Configuration multi-domaines support√©e"
    echo
    echo "üéØ L'utilisateur ne sera jamais bloqu√© :"
    echo "   ‚úì HTTP toujours accessible m√™me si HTTPS √©choue"
    echo "   ‚úì Certificats auto-sign√©s de fallback"
    echo "   ‚úì Messages d'erreur avec solutions"
    echo "   ‚úì Validation avant confirmation de succ√®s"
    echo "   ‚úì Logs d√©taill√©s pour le diagnostic"
    echo
}

main() {
    echo "üß™ Tests de Robustesse HTTPS et Configuration"
    echo "============================================="
    echo
    
    local tests_passed=0
    local total_tests=6
    
    if test_nginx_config_robustness; then ((tests_passed++)); fi
    if test_deployment_script_robustness; then ((tests_passed++)); fi
    if test_ssl_fallback_mechanism; then ((tests_passed++)); fi
    if test_accessibility_validation; then ((tests_passed++)); fi
    if test_error_handling; then ((tests_passed++)); fi
    if test_documentation_completeness; then ((tests_passed++)); fi
    
    echo
    echo "R√©sultats: $tests_passed/$total_tests tests de robustesse pass√©s"
    
    if [ $tests_passed -eq $total_tests ]; then
        echo -e "${GREEN}‚úÖ Syst√®me compl√®tement robuste et pr√™t !${NC}"
        show_robustness_summary
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è Certains aspects de robustesse n√©cessitent attention${NC}"
        return 1
    fi
}

main "$@"