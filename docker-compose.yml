services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: vote-secret-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-vote_secret}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - vote-secret-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vote-secret-backend
    restart: unless-stopped
    environment:
      MONGO_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB:-vote_secret}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - vote-secret-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vote-secret-frontend
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_URL: https://${DOMAIN}
    networks:
      - vote-secret-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Reverse Proxy & SSL
  nginx:
    image: nginx:alpine
    container_name: vote-secret-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot:ro
      - letsencrypt_data:/etc/letsencrypt:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - vote-secret-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # SSL Certificate Manager
  certbot:
    image: certbot/certbot
    container_name: vote-secret-certbot
    volumes:
      - certbot_data:/var/www/certbot
      - letsencrypt_data:/etc/letsencrypt
    networks:
      - vote-secret-network
    command: >
      sh -c "
        echo 'Démarrage Certbot pour ${DOMAIN:-vote.example.com}...';
        if [ ! -f /etc/letsencrypt/live/${DOMAIN:-vote.example.com}/fullchain.pem ]; then
          echo 'Génération du certificat SSL...';
          certbot certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL:-admin@example.com} --agree-tos --no-eff-email -d ${DOMAIN:-vote.example.com};
          if [ $$? -eq 0 ]; then
            echo 'Certificat SSL généré avec succès';
          else
            echo 'Erreur lors de la génération du certificat SSL';
          fi
        else
          echo 'Certificat SSL déjà existant';
        fi;
        while :; do 
          echo 'Vérification du renouvellement SSL...';
          certbot renew --quiet; 
          sleep 12h; 
        done
      "
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

networks:
  vote-secret-network:
    driver: bridge
    name: vote-secret-network

volumes:
  mongodb_data:
    driver: local
    name: vote-secret-mongodb-data
  certbot_data:
    driver: local
    name: vote-secret-certbot-data
  letsencrypt_data:
    driver: local
    name: vote-secret-letsencrypt-data