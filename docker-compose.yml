# SUPER Vote Secret - Docker Compose Optimis√© v4.0
# Configuration efficace et performante

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: vote-secret-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-vote_secret}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - vote-secret-network
    expose:
      - "27017"
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
        - vote-secret-backend:latest
    container_name: vote-secret-backend
    restart: unless-stopped
    environment:
      MONGO_URL: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DB:-vote_secret}?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      PYTHONUNBUFFERED: 1
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - vote-secret-network
    expose:
      - "8001"
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        NODE_ENV: production
        REACT_APP_BACKEND_URL: https://${DOMAIN}
    container_name: vote-secret-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_BACKEND_URL: https://${DOMAIN}
      GENERATE_SOURCEMAP: false
    networks:
      - vote-secret-network
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=10", "http://localhost:3000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy & SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: vote-secret-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443"  # Fallback SSL port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot:ro
      - letsencrypt_data:/etc/letsencrypt:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - vote-secret-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--timeout=5", "http://localhost:80/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SSL Certificate Manager
  certbot:
    image: certbot/certbot:latest
    container_name: vote-secret-certbot
    restart: unless-stopped
    volumes:
      - certbot_data:/var/www/certbot
      - letsencrypt_data:/etc/letsencrypt
      - certbot_logs:/var/log/letsencrypt
    networks:
      - vote-secret-network
    environment:
      DOMAIN: ${DOMAIN}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
    command: >
      sh -c '
        echo "üîí Certbot starting for domain: $$DOMAIN";
        
        # Wait for nginx to be ready
        sleep 45;
        
        # Check if certificate already exists
        if [ -f "/etc/letsencrypt/live/$$DOMAIN/fullchain.pem" ]; then
          echo "‚úÖ SSL certificate already exists for $$DOMAIN";
          # Create/update default symlink
          ln -sf /etc/letsencrypt/live/$$DOMAIN /etc/letsencrypt/live/default 2>/dev/null || true;
        else
          echo "üîë Generating new SSL certificate for $$DOMAIN...";
          
          # Attempt certificate generation with proper validation
          for attempt in 1 2 3; do
            echo "üîÑ SSL attempt $$attempt/3 for $$DOMAIN";
            
            # Test HTTP accessibility first
            if wget --spider --tries=3 --timeout=10 http://$$DOMAIN/.well-known/acme-challenge/ 2>/dev/null; then
              echo "‚úÖ HTTP challenge path accessible";
            else
              echo "‚ö†Ô∏è  HTTP challenge path not accessible - continuing anyway";
            fi
            
            # Generate certificate
            if certbot certonly \
              --webroot \
              --webroot-path=/var/www/certbot \
              --email $$ADMIN_EMAIL \
              --agree-tos \
              --no-eff-email \
              --non-interactive \
              --preferred-challenges http \
              --rsa-key-size 4096 \
              --must-staple \
              -d $$DOMAIN \
              --verbose; then
              
              echo "‚úÖ SSL certificate generated successfully for $$DOMAIN";
              ln -sf /etc/letsencrypt/live/$$DOMAIN /etc/letsencrypt/live/default;
              
              # Test certificate validity
              if openssl x509 -in /etc/letsencrypt/live/$$DOMAIN/fullchain.pem -noout -dates; then
                echo "‚úÖ Certificate validation successful";
                break;
              else
                echo "‚ùå Certificate validation failed";
              fi
            else
              echo "‚ùå SSL generation attempt $$attempt failed";
              [ $$attempt -eq 3 ] && echo "‚ùå All SSL attempts failed - HTTP mode will be used";
            fi
            
            sleep 30;
          done
        fi
        
        # Continuous renewal loop
        while true; do
          echo "üîÑ Checking certificate renewal (every 12 hours)";
          certbot renew --quiet --no-self-upgrade;
          sleep 12h;
        done
      '
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 32M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  vote-secret-network:
    driver: bridge
    name: vote-secret-network
    driver_opts:
      com.docker.network.bridge.name: br-vote-secret
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  mongodb_data:
    driver: local
    name: vote-secret-mongodb-data
  
  certbot_data:
    driver: local
    name: vote-secret-certbot-data
    
  letsencrypt_data:
    driver: local
    name: vote-secret-letsencrypt-data
    
  nginx_cache:
    driver: local
    name: vote-secret-nginx-cache
    
  nginx_logs:
    driver: local
    name: vote-secret-nginx-logs
    
  certbot_logs:
    driver: local
    name: vote-secret-certbot-logs