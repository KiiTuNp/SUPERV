#!/usr/bin/env python3
"""
TEST DE CHARGE R√âALISTE - 100 PARTICIPANTS SUR 15 MINUTES
Simulation compl√®te d'une assembl√©e g√©n√©rale avec 100 participants
"""

import requests
import json
import time
import asyncio
import threading
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import concurrent.futures
from dataclasses import dataclass
import statistics

# Configuration
BASE_URL = "https://dffd1ffb-03ba-4c55-8b21-65220fce6f6a.preview.emergentagent.com/api"

@dataclass
class LoadTestMetrics:
    """M√©triques de performance pour le test de charge"""
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    response_times: List[float] = None
    errors: List[str] = None
    start_time: datetime = None
    end_time: datetime = None
    
    def __post_init__(self):
        if self.response_times is None:
            self.response_times = []
        if self.errors is None:
            self.errors = []

class RealisticLoadTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.metrics = LoadTestMetrics()
        self.meeting_data = {}
        self.participants = []
        self.polls = []
        self.votes_submitted = []
        
        # Noms fran√ßais r√©alistes pour 100 participants
        self.french_names = [
            "Jean Dupont", "Marie Martin", "Pierre Durand", "Claire Moreau", "Antoine Bernard",
            "Sophie Lefebvre", "Michel Rousseau", "Isabelle Petit", "Fran√ßois Garnier", "Catherine Leroy",
            "Nicolas Roux", "Sylvie Fournier", "Alain Girard", "Monique Bonnet", "Philippe Mercier",
            "Nathalie Blanc", "Thierry Lambert", "V√©ronique Fabre", "Christophe Morel", "Brigitte Barbier",
            "St√©phane Leroux", "Martine Chevalier", "Olivier Joly", "Fran√ßoise Meunier", "Patrice Robin",
            "Corinne Gautier", "Didier Muller", "Chantal Bertrand", "Fr√©d√©ric Lefevre", "Dominique Moreau",
            "S√©bastien Roche", "Pascale Giraud", "Laurent Andre", "Val√©rie Prevost", "Herv√© Marchand",
            "Sandrine Perrin", "Yves Morin", "Karine Clement", "Bruno Masson", "C√©line Bourgeois",
            "G√©rard Fontaine", "Jacqueline Roussel", "Daniel Leclerc", "Annie Legrand", "Claude Gauthier",
            "Mich√®le Dumont", "Ren√© Delaunay", "Josette Dufour", "Marcel Lemaire", "Odette Carpentier",
            "Roger Brun", "Simone Benoit", "Henri Caron", "Denise Guillot", "Andr√© Renard",
            "Paulette Picard", "Louis Blanchard", "Georgette Vidal", "Albert Fleury", "Jeannine Maillard",
            "Paul Lecomte", "Lucienne Gaillard", "Fernand Hubert", "Raymonde Berger", "Maurice Lacroix",
            "Yvette Collet", "Lucien Charpentier", "Suzanne Boucher", "√âmile Vasseur", "Madeleine Menard",
            "Gaston Leblanc", "Berthe Rolland", "Armand Cousin", "Henriette Leconte", "L√©on Bouchet",
            "Germaine Leclercq", "Eug√®ne Mallet", "Marthe Gros", "Alphonse Benard", "L√©onie Humbert",
            "√âdouard Poulain", "Marguerite Lemoine", "Raoul Tessier", "Jeanne Chevallier", "Camille Perrot",
            "Blanche Reynaud", "Julien Guyot", "Augustine Barre", "√âmilien Masse", "C√©lestine Bruneau",
            "Firmin Jamin", "Ernestine Pichon", "D√©sir√© Marin", "L√©ontine Legros", "Aristide Salmon",
            "Philom√®ne Bertin", "Honor√© Lemaitre", "Victorine Pons", "Th√©ophile Lejeune", "Alexandrine Roy"
        ]
        
        # Sujets r√©alistes d'assembl√©e g√©n√©rale
        self.realistic_polls = [
            {
                "question": "Approuvez-vous l'augmentation du budget annuel de 15% pour l'ann√©e 2025 ?",
                "options": ["Oui, j'approuve", "Non, je m'oppose", "Je m'abstiens", "Je demande plus d'informations"]
            },
            {
                "question": "√ätes-vous favorable √† la cr√©ation d'un nouveau poste de directeur adjoint ?",
                "options": ["Tr√®s favorable", "Plut√¥t favorable", "Plut√¥t d√©favorable", "Tr√®s d√©favorable", "Sans opinion"]
            },
            {
                "question": "Quelle priorit√© donner aux investissements technologiques cette ann√©e ?",
                "options": ["Priorit√© maximale", "Priorit√© √©lev√©e", "Priorit√© moyenne", "Priorit√© faible", "Pas de priorit√©"]
            },
            {
                "question": "Approuvez-vous la modification des statuts propos√©e par le conseil d'administration ?",
                "options": ["J'approuve enti√®rement", "J'approuve avec r√©serves", "Je n'approuve pas", "Je m'abstiens"]
            },
            {
                "question": "Quel mode de communication privil√©gier pour les futures assembl√©es ?",
                "options": ["Pr√©sentiel uniquement", "Hybride (pr√©sentiel + visio)", "Visioconf√©rence uniquement", "Indiff√©rent"]
            },
            {
                "question": "√ätes-vous satisfait de la gestion financi√®re de l'organisation cette ann√©e ?",
                "options": ["Tr√®s satisfait", "Plut√¥t satisfait", "Plut√¥t insatisfait", "Tr√®s insatisfait", "Ne se prononce pas"]
            },
            {
                "question": "Faut-il renouveler le mandat du commissaire aux comptes actuel ?",
                "options": ["Oui, renouvellement", "Non, changement n√©cessaire", "Abstention"]
            }
        ]

    def log_metric(self, operation: str, success: bool, response_time: float, error_msg: str = None):
        """Enregistrer une m√©trique de performance"""
        self.metrics.total_requests += 1
        if success:
            self.metrics.successful_requests += 1
        else:
            self.metrics.failed_requests += 1
            if error_msg:
                self.metrics.errors.append(f"{operation}: {error_msg}")
        
        self.metrics.response_times.append(response_time)
        
        # Log en temps r√©el
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {operation}: {response_time:.3f}s" + (f" - {error_msg}" if error_msg else ""))

    def create_meeting(self):
        """Cr√©er l'assembl√©e g√©n√©rale"""
        print("üèõÔ∏è  CR√âATION DE L'ASSEMBL√âE G√âN√âRALE")
        print("=" * 50)
        
        meeting_data = {
            "title": "Assembl√©e G√©n√©rale Annuelle 2025",
            "organizer_name": "Alice Dupont"
        }
        
        try:
            start_time = time.time()
            response = self.session.post(f"{BASE_URL}/meetings", json=meeting_data)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                self.meeting_data = response.json()
                self.log_metric("Cr√©ation assembl√©e", True, response_time)
                print(f"üìã Assembl√©e cr√©√©e - Code: {self.meeting_data['meeting_code']}")
                return True
            else:
                self.log_metric("Cr√©ation assembl√©e", False, response_time, f"HTTP {response.status_code}")
                return False
        except Exception as e:
            self.log_metric("Cr√©ation assembl√©e", False, 0, str(e))
            return False

    def add_participants_progressively(self):
        """Ajouter 100 participants de mani√®re √©chelonn√©e sur 15 minutes"""
        print("\nüë• AJOUT PROGRESSIF DE 100 PARTICIPANTS (15 minutes)")
        print("=" * 50)
        
        if not self.meeting_data:
            print("‚ùå Pas de donn√©es d'assembl√©e disponibles")
            return False
        
        # R√©partir les 100 participants sur 15 minutes (900 secondes)
        # Arriv√©e √©chelonn√©e : 10-15 participants par minute
        total_duration = 900  # 15 minutes en secondes
        participants_per_batch = 5  # 5 participants par lot
        batch_interval = 45  # 45 secondes entre chaque lot
        
        start_time = time.time()
        batch_count = 0
        
        for i in range(0, 100, participants_per_batch):
            batch_count += 1
            batch_participants = self.french_names[i:i+participants_per_batch]
            
            print(f"\nüì• Lot {batch_count}: Ajout de {len(batch_participants)} participants...")
            
            # Ajouter les participants du lot en parall√®le
            with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                futures = []
                for name in batch_participants:
                    future = executor.submit(self.add_single_participant, name)
                    futures.append(future)
                
                # Attendre que tous les participants du lot soient ajout√©s
                for future in concurrent.futures.as_completed(futures):
                    try:
                        participant = future.result()
                        if participant:
                            self.participants.append(participant)
                    except Exception as e:
                        print(f"‚ùå Erreur lors de l'ajout d'un participant: {e}")
            
            # Attendre avant le prochain lot (sauf pour le dernier)
            if i + participants_per_batch < 100:
                elapsed = time.time() - start_time
                expected_time = batch_count * batch_interval
                
                if elapsed < expected_time:
                    wait_time = expected_time - elapsed
                    print(f"‚è≥ Attente de {wait_time:.1f}s avant le prochain lot...")
                    time.sleep(wait_time)
        
        total_time = time.time() - start_time
        print(f"\n‚úÖ {len(self.participants)} participants ajout√©s en {total_time:.1f}s")
        return len(self.participants) > 0

    def add_single_participant(self, name: str):
        """Ajouter un seul participant"""
        try:
            join_data = {
                "name": name,
                "meeting_code": self.meeting_data['meeting_code']
            }
            
            start_time = time.time()
            response = self.session.post(f"{BASE_URL}/participants/join", json=join_data)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                participant = response.json()
                self.log_metric(f"Ajout {name}", True, response_time)
                return participant
            else:
                self.log_metric(f"Ajout {name}", False, response_time, f"HTTP {response.status_code}")
                return None
        except Exception as e:
            self.log_metric(f"Ajout {name}", False, 0, str(e))
            return None

    def approve_participants_batch(self):
        """Approuver tous les participants par lots"""
        print("\n‚úÖ APPROBATION EN LOT DES PARTICIPANTS")
        print("=" * 50)
        
        if not self.participants:
            print("‚ùå Aucun participant √† approuver")
            return False
        
        # Approuver par lots de 10
        batch_size = 10
        approved_count = 0
        
        for i in range(0, len(self.participants), batch_size):
            batch = self.participants[i:i+batch_size]
            print(f"üìù Approbation du lot {i//batch_size + 1}: {len(batch)} participants...")
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                futures = []
                for participant in batch:
                    future = executor.submit(self.approve_single_participant, participant)
                    futures.append(future)
                
                for future in concurrent.futures.as_completed(futures):
                    try:
                        if future.result():
                            approved_count += 1
                    except Exception as e:
                        print(f"‚ùå Erreur lors de l'approbation: {e}")
            
            # Petite pause entre les lots
            time.sleep(1)
        
        print(f"‚úÖ {approved_count}/{len(self.participants)} participants approuv√©s")
        return approved_count > 0

    def approve_single_participant(self, participant):
        """Approuver un seul participant"""
        try:
            approval_data = {
                "participant_id": participant['id'],
                "approved": True
            }
            
            start_time = time.time()
            response = self.session.post(f"{BASE_URL}/participants/{participant['id']}/approve", json=approval_data)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                self.log_metric(f"Approbation {participant['name']}", True, response_time)
                return True
            else:
                self.log_metric(f"Approbation {participant['name']}", False, response_time, f"HTTP {response.status_code}")
                return False
        except Exception as e:
            self.log_metric(f"Approbation {participant['name']}", False, 0, str(e))
            return False

    def create_realistic_polls(self):
        """Cr√©er 6-7 sondages r√©alistes"""
        print("\nüìä CR√âATION DES SONDAGES")
        print("=" * 50)
        
        if not self.meeting_data:
            print("‚ùå Pas de donn√©es d'assembl√©e disponibles")
            return False
        
        # S√©lectionner 6 sondages al√©atoirement
        selected_polls = random.sample(self.realistic_polls, 6)
        
        for i, poll_data in enumerate(selected_polls, 1):
            try:
                start_time = time.time()
                response = self.session.post(f"{BASE_URL}/meetings/{self.meeting_data['id']}/polls", json=poll_data)
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    poll = response.json()
                    self.polls.append(poll)
                    self.log_metric(f"Cr√©ation sondage {i}", True, response_time)
                    print(f"üìã Sondage {i}: {poll_data['question'][:50]}...")
                else:
                    self.log_metric(f"Cr√©ation sondage {i}", False, response_time, f"HTTP {response.status_code}")
            except Exception as e:
                self.log_metric(f"Cr√©ation sondage {i}", False, 0, str(e))
        
        print(f"‚úÖ {len(self.polls)} sondages cr√©√©s")
        return len(self.polls) > 0

    def simulate_realistic_voting(self):
        """Simuler des votes r√©alistes sur 15 minutes"""
        print("\nüó≥Ô∏è  SIMULATION DE VOTES R√âALISTES (15 minutes)")
        print("=" * 50)
        
        if not self.polls or not self.participants:
            print("‚ùå Pas de sondages ou participants disponibles")
            return False
        
        # D√©marrer tous les sondages
        for i, poll in enumerate(self.polls, 1):
            try:
                start_time = time.time()
                response = self.session.post(f"{BASE_URL}/polls/{poll['id']}/start")
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    self.log_metric(f"D√©marrage sondage {i}", True, response_time)
                    print(f"‚ñ∂Ô∏è  Sondage {i} d√©marr√©")
                else:
                    self.log_metric(f"D√©marrage sondage {i}", False, response_time, f"HTTP {response.status_code}")
            except Exception as e:
                self.log_metric(f"D√©marrage sondage {i}", False, 0, str(e))
        
        # Simulation de votes r√©alistes
        # Pas tous les participants votent sur tous les sondages (70-90% de participation)
        voting_duration = 900  # 15 minutes
        start_time = time.time()
        
        total_votes = 0
        
        for poll_index, poll in enumerate(self.polls):
            print(f"\nüó≥Ô∏è  Votes pour le sondage {poll_index + 1}...")
            
            # Participation variable (70-90%)
            participation_rate = random.uniform(0.70, 0.90)
            voting_participants = random.sample(self.participants, int(len(self.participants) * participation_rate))
            
            # R√©partir les votes sur plusieurs vagues
            votes_per_wave = 15  # 15 votes simultan√©s maximum
            
            for i in range(0, len(voting_participants), votes_per_wave):
                wave_participants = voting_participants[i:i+votes_per_wave]
                
                # Votes simultan√©s pour cette vague
                with concurrent.futures.ThreadPoolExecutor(max_workers=15) as executor:
                    futures = []
                    for participant in wave_participants:
                        # Choix d'option r√©aliste (distribution non uniforme)
                        option_weights = self.get_realistic_option_weights(len(poll['options']))
                        chosen_option = random.choices(poll['options'], weights=option_weights)[0]
                        
                        future = executor.submit(self.submit_vote, poll['id'], chosen_option['id'], participant['name'])
                        futures.append(future)
                    
                    for future in concurrent.futures.as_completed(futures):
                        try:
                            if future.result():
                                total_votes += 1
                        except Exception as e:
                            print(f"‚ùå Erreur lors du vote: {e}")
                
                # Pause entre les vagues
                time.sleep(random.uniform(2, 5))
            
            # Pause entre les sondages
            time.sleep(random.uniform(5, 10))
        
        # Fermer tous les sondages
        for i, poll in enumerate(self.polls, 1):
            try:
                start_time = time.time()
                response = self.session.post(f"{BASE_URL}/polls/{poll['id']}/close")
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    self.log_metric(f"Fermeture sondage {i}", True, response_time)
                    print(f"‚èπÔ∏è  Sondage {i} ferm√©")
                else:
                    self.log_metric(f"Fermeture sondage {i}", False, response_time, f"HTTP {response.status_code}")
            except Exception as e:
                self.log_metric(f"Fermeture sondage {i}", False, 0, str(e))
        
        total_time = time.time() - start_time
        print(f"\n‚úÖ {total_votes} votes soumis en {total_time:.1f}s")
        return total_votes > 0

    def get_realistic_option_weights(self, num_options):
        """G√©n√©rer des poids r√©alistes pour les options (distribution non uniforme)"""
        if num_options == 2:
            return [0.6, 0.4]  # L√©g√®re pr√©f√©rence pour la premi√®re option
        elif num_options == 3:
            return [0.5, 0.3, 0.2]  # Distribution d√©croissante
        elif num_options == 4:
            return [0.4, 0.3, 0.2, 0.1]
        elif num_options == 5:
            return [0.3, 0.25, 0.2, 0.15, 0.1]
        else:
            # Distribution uniforme par d√©faut
            return [1.0/num_options] * num_options

    def submit_vote(self, poll_id: str, option_id: str, voter_name: str):
        """Soumettre un vote"""
        try:
            vote_data = {
                "poll_id": poll_id,
                "option_id": option_id
            }
            
            start_time = time.time()
            response = self.session.post(f"{BASE_URL}/votes", json=vote_data)
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                self.log_metric(f"Vote {voter_name}", True, response_time)
                return True
            else:
                self.log_metric(f"Vote {voter_name}", False, response_time, f"HTTP {response.status_code}")
                return False
        except Exception as e:
            self.log_metric(f"Vote {voter_name}", False, 0, str(e))
            return False

    def test_pdf_generation_with_large_dataset(self):
        """Tester la g√©n√©ration PDF avec un gros volume de donn√©es"""
        print("\nüìÑ G√âN√âRATION PDF AVEC GROS VOLUME DE DONN√âES")
        print("=" * 50)
        
        if not self.meeting_data:
            print("‚ùå Pas de donn√©es d'assembl√©e disponibles")
            return False
        
        try:
            print("üîÑ G√©n√©ration du rapport PDF en cours...")
            start_time = time.time()
            response = self.session.get(f"{BASE_URL}/meetings/{self.meeting_data['id']}/report")
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                if 'application/pdf' in content_type:
                    file_size = len(response.content)
                    self.log_metric("G√©n√©ration PDF", True, response_time)
                    print(f"‚úÖ PDF g√©n√©r√© avec succ√®s:")
                    print(f"   üìä Taille: {file_size:,} bytes ({file_size/1024:.1f} KB)")
                    print(f"   ‚è±Ô∏è  Temps: {response_time:.3f}s")
                    print(f"   üë• Participants: {len(self.participants)}")
                    print(f"   üìã Sondages: {len(self.polls)}")
                    return True
                else:
                    self.log_metric("G√©n√©ration PDF", False, response_time, f"Type de contenu incorrect: {content_type}")
                    return False
            else:
                self.log_metric("G√©n√©ration PDF", False, response_time, f"HTTP {response.status_code}")
                return False
        except Exception as e:
            self.log_metric("G√©n√©ration PDF", False, 0, str(e))
            return False

    def verify_data_deletion(self):
        """V√©rifier la suppression compl√®te des donn√©es"""
        print("\nüóëÔ∏è  V√âRIFICATION DE LA SUPPRESSION DES DONN√âES")
        print("=" * 50)
        
        if not self.meeting_data:
            print("‚ùå Pas de donn√©es d'assembl√©e disponibles")
            return False
        
        deletion_verified = True
        
        # V√©rifier que l'assembl√©e est supprim√©e
        try:
            start_time = time.time()
            response = self.session.get(f"{BASE_URL}/meetings/{self.meeting_data['meeting_code']}")
            response_time = time.time() - start_time
            
            if response.status_code == 404:
                self.log_metric("V√©rification suppression assembl√©e", True, response_time)
                print("‚úÖ Assembl√©e correctement supprim√©e")
            else:
                self.log_metric("V√©rification suppression assembl√©e", False, response_time, f"HTTP {response.status_code}")
                deletion_verified = False
        except Exception as e:
            self.log_metric("V√©rification suppression assembl√©e", False, 0, str(e))
            deletion_verified = False
        
        # V√©rifier que les participants sont supprim√©s (√©chantillon)
        sample_participants = random.sample(self.participants, min(10, len(self.participants)))
        for participant in sample_participants:
            try:
                start_time = time.time()
                response = self.session.get(f"{BASE_URL}/participants/{participant['id']}/status")
                response_time = time.time() - start_time
                
                if response.status_code == 404:
                    self.log_metric(f"V√©rification suppression {participant['name']}", True, response_time)
                else:
                    self.log_metric(f"V√©rification suppression {participant['name']}", False, response_time, f"HTTP {response.status_code}")
                    deletion_verified = False
            except Exception as e:
                self.log_metric(f"V√©rification suppression {participant['name']}", False, 0, str(e))
                deletion_verified = False
        
        # V√©rifier que les sondages sont supprim√©s (√©chantillon)
        sample_polls = random.sample(self.polls, min(3, len(self.polls)))
        for i, poll in enumerate(sample_polls, 1):
            try:
                start_time = time.time()
                response = self.session.get(f"{BASE_URL}/polls/{poll['id']}/results")
                response_time = time.time() - start_time
                
                if response.status_code == 404:
                    self.log_metric(f"V√©rification suppression sondage {i}", True, response_time)
                else:
                    self.log_metric(f"V√©rification suppression sondage {i}", False, response_time, f"HTTP {response.status_code}")
                    deletion_verified = False
            except Exception as e:
                self.log_metric(f"V√©rification suppression sondage {i}", False, 0, str(e))
                deletion_verified = False
        
        if deletion_verified:
            print("‚úÖ Suppression compl√®te des donn√©es v√©rifi√©e")
        else:
            print("‚ùå Probl√®mes d√©tect√©s lors de la suppression")
        
        return deletion_verified

    def generate_performance_report(self):
        """G√©n√©rer un rapport d√©taill√© des performances"""
        print("\nüìà RAPPORT DE PERFORMANCE D√âTAILL√â")
        print("=" * 60)
        
        if not self.metrics.response_times:
            print("‚ùå Aucune donn√©e de performance disponible")
            return
        
        # Calculs statistiques
        response_times = self.metrics.response_times
        avg_time = statistics.mean(response_times)
        median_time = statistics.median(response_times)
        min_time = min(response_times)
        max_time = max(response_times)
        p95_time = sorted(response_times)[int(len(response_times) * 0.95)]
        p99_time = sorted(response_times)[int(len(response_times) * 0.99)]
        
        total_duration = (self.metrics.end_time - self.metrics.start_time).total_seconds()
        requests_per_second = self.metrics.total_requests / total_duration if total_duration > 0 else 0
        
        success_rate = (self.metrics.successful_requests / self.metrics.total_requests * 100) if self.metrics.total_requests > 0 else 0
        
        print(f"üéØ M√âTRIQUES GLOBALES:")
        print(f"   üìä Total requ√™tes: {self.metrics.total_requests:,}")
        print(f"   ‚úÖ Succ√®s: {self.metrics.successful_requests:,} ({success_rate:.1f}%)")
        print(f"   ‚ùå √âchecs: {self.metrics.failed_requests:,}")
        print(f"   ‚è±Ô∏è  Dur√©e totale: {total_duration:.1f}s")
        print(f"   üöÄ Requ√™tes/seconde: {requests_per_second:.2f}")
        
        print(f"\n‚è±Ô∏è  TEMPS DE R√âPONSE:")
        print(f"   üìä Moyenne: {avg_time:.3f}s")
        print(f"   üìä M√©diane: {median_time:.3f}s")
        print(f"   üìä Minimum: {min_time:.3f}s")
        print(f"   üìä Maximum: {max_time:.3f}s")
        print(f"   üìä 95e percentile: {p95_time:.3f}s")
        print(f"   üìä 99e percentile: {p99_time:.3f}s")
        
        print(f"\nüë• DONN√âES DE CHARGE:")
        print(f"   üë§ Participants ajout√©s: {len(self.participants)}")
        print(f"   üìã Sondages cr√©√©s: {len(self.polls)}")
        print(f"   üó≥Ô∏è  Votes estim√©s: {len([m for m in self.metrics.response_times if 'Vote' in str(m)])}")
        
        if self.metrics.errors:
            print(f"\n‚ùå ERREURS D√âTECT√âES ({len(self.metrics.errors)}):")
            for error in self.metrics.errors[:10]:  # Afficher les 10 premi√®res erreurs
                print(f"   ‚Ä¢ {error}")
            if len(self.metrics.errors) > 10:
                print(f"   ... et {len(self.metrics.errors) - 10} autres erreurs")
        
        # √âvaluation de la robustesse
        print(f"\nüèÜ √âVALUATION DE LA ROBUSTESSE:")
        if success_rate >= 95 and avg_time <= 1.0 and max_time <= 5.0:
            print("   ‚úÖ EXCELLENT - Syst√®me tr√®s robuste")
        elif success_rate >= 90 and avg_time <= 2.0 and max_time <= 10.0:
            print("   ‚úÖ BON - Syst√®me robuste")
        elif success_rate >= 80 and avg_time <= 5.0:
            print("   ‚ö†Ô∏è  ACCEPTABLE - Quelques am√©liorations n√©cessaires")
        else:
            print("   ‚ùå PROBL√âMATIQUE - Optimisations requises")

    def run_complete_load_test(self):
        """Ex√©cuter le test de charge complet"""
        print("üöÄ D√âMARRAGE DU TEST DE CHARGE R√âALISTE")
        print("üéØ 100 PARTICIPANTS - 15 MINUTES - ASSEMBL√âE G√âN√âRALE 2025")
        print("=" * 70)
        
        self.metrics.start_time = datetime.now()
        
        # √âtapes du test
        steps = [
            ("Cr√©ation de l'assembl√©e", self.create_meeting),
            ("Ajout progressif des participants", self.add_participants_progressively),
            ("Approbation en lot", self.approve_participants_batch),
            ("Cr√©ation des sondages", self.create_realistic_polls),
            ("Simulation de votes r√©alistes", self.simulate_realistic_voting),
            ("G√©n√©ration PDF avec gros volume", self.test_pdf_generation_with_large_dataset),
            ("V√©rification suppression donn√©es", self.verify_data_deletion)
        ]
        
        results = {}
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name.upper()}")
            print("-" * 50)
            
            try:
                step_start = time.time()
                result = step_func()
                step_duration = time.time() - step_start
                
                results[step_name] = {
                    'success': result,
                    'duration': step_duration
                }
                
                if result:
                    print(f"‚úÖ {step_name} termin√© avec succ√®s ({step_duration:.1f}s)")
                else:
                    print(f"‚ùå {step_name} a √©chou√© ({step_duration:.1f}s)")
                    
            except Exception as e:
                print(f"‚ùå Erreur critique dans {step_name}: {e}")
                results[step_name] = {
                    'success': False,
                    'duration': 0,
                    'error': str(e)
                }
        
        self.metrics.end_time = datetime.now()
        
        # Rapport final
        print("\n" + "=" * 70)
        print("üèÅ R√âSULTATS DU TEST DE CHARGE")
        print("=" * 70)
        
        successful_steps = sum(1 for r in results.values() if r['success'])
        total_steps = len(results)
        
        print(f"üìä √âtapes r√©ussies: {successful_steps}/{total_steps}")
        
        for step_name, result in results.items():
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {step_name}: {result['duration']:.1f}s")
        
        # Rapport de performance d√©taill√©
        self.generate_performance_report()
        
        # Conclusion
        if successful_steps == total_steps:
            print("\nüéâ TEST DE CHARGE R√âUSSI!")
            print("‚úÖ Le syst√®me est robuste et peut g√©rer 100 participants")
        else:
            print(f"\n‚ö†Ô∏è  TEST PARTIELLEMENT R√âUSSI ({successful_steps}/{total_steps})")
            print("üîß Certaines optimisations peuvent √™tre n√©cessaires")
        
        return successful_steps == total_steps

def main():
    """Fonction principale"""
    tester = RealisticLoadTester()
    success = tester.run_complete_load_test()
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)