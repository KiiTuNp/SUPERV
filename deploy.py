#!/usr/bin/env python3
"""
Vote Secret v2.0 - D√©ploiement Production Automatis√©
===================================================

Script de d√©ploiement complet pour serveur de production.
Installe tous les pr√©requis, configure l'environnement et met en production.

Auteur: Assistant AI
Version: 2.0.0
Date: 2025-08-01
"""

import os
import sys
import subprocess
import platform
import json
import time
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import importlib.util

# Configuration des couleurs et styles
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(text: str):
    """Affiche un en-t√™te stylis√©"""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'=' * 80}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text.center(80)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'=' * 80}{Colors.ENDC}\n")

def print_step(step_num: int, total_steps: int, description: str):
    """Affiche une √©tape du processus"""
    print(f"\n{Colors.CYAN}{Colors.BOLD}[√âTAPE {step_num}/{total_steps}] {description}{Colors.ENDC}")
    print(f"{Colors.CYAN}{'‚îÄ' * 60}{Colors.ENDC}")

def print_success(text: str):
    """Affiche un message de succ√®s"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.ENDC}")

def print_warning(text: str):
    """Affiche un avertissement"""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {text}{Colors.ENDC}")

def print_error(text: str):
    """Affiche une erreur"""
    print(f"{Colors.FAIL}‚ùå {text}{Colors.ENDC}")

def print_info(text: str):
    """Affiche une information"""
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.ENDC}")

def prompt_continue(message: str = "Continuer avec l'√©tape suivante ?") -> bool:
    """Demande confirmation pour continuer"""
    while True:
        response = input(f"\n{Colors.BLUE}{message} [O/n]{Colors.ENDC}: ").strip().lower()
        if response in ['', 'o', 'oui', 'y', 'yes']:
            return True
        elif response in ['n', 'non', 'no']:
            return False
        print_warning("R√©ponse invalide. Utilisez 'o' pour oui ou 'n' pour non.")

def run_command(command: str, description: str = "", check_success: bool = True, interactive: bool = False) -> Tuple[bool, str, str]:
    """Ex√©cute une commande syst√®me avec gestion d'erreur"""
    if description:
        print(f"{Colors.BLUE}üîÑ {description}...{Colors.ENDC}")
    
    try:
        if interactive:
            # Pour les commandes interactives, afficher la commande et laisser l'utilisateur la voir
            print(f"{Colors.CYAN}Commande: {command}{Colors.ENDC}")
            process = subprocess.run(
                command,
                shell=True,
                text=True,
                timeout=600  # 10 minutes pour les commandes interactives
            )
            success = process.returncode == 0
            return success, "", ""
        else:
            process = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes timeout
            )
            
            stdout = process.stdout.strip()
            stderr = process.stderr.strip()
            success = process.returncode == 0
            
            if success:
                if description:
                    print_success(f"{description} - Termin√©")
                return True, stdout, stderr
            else:
                if check_success:
                    print_error(f"{description} - √âchec")
                    if stderr:
                        print(f"{Colors.FAIL}Erreur: {stderr}{Colors.ENDC}")
                    if stdout:
                        print(f"{Colors.WARNING}Sortie: {stdout}{Colors.ENDC}")
                return False, stdout, stderr
            
    except subprocess.TimeoutExpired:
        print_error(f"{description} - Timeout")
        return False, "", "Timeout"
    except Exception as e:
        print_error(f"{description} - Exception: {str(e)}")
        return False, "", str(e)

class SystemInfo:
    """Collecte les informations syst√®me"""
    
    def __init__(self):
        self.os_name = platform.system().lower()
        self.os_version = platform.release()
        self.architecture = platform.machine()
        self.python_version = sys.version_info
        self.is_root = os.geteuid() == 0 if hasattr(os, 'geteuid') else False
        self.distro = self._get_linux_distro() if self.os_name == 'linux' else None
        
    def _get_linux_distro(self) -> Optional[str]:
        """D√©tecte la distribution Linux"""
        try:
            with open('/etc/os-release', 'r') as f:
                lines = f.readlines()
                for line in lines:
                    if line.startswith('ID='):
                        return line.split('=')[1].strip().strip('"')
        except:
            pass
        return None
    
    def is_supported(self) -> Tuple[bool, str]:
        """V√©rifie si le syst√®me est support√©"""
        if self.os_name != 'linux':
            return False, f"Syst√®me non support√©: {self.os_name}. Seul Linux est support√©."
        
        if self.distro not in ['ubuntu', 'debian', 'centos', 'rhel', 'fedora', 'rocky', 'almalinux']:
            return False, f"Distribution non support√©e: {self.distro}. Support√©es: Ubuntu, Debian, CentOS, RHEL, Fedora, Rocky, AlmaLinux."
        
        if self.python_version < (3, 8):
            return False, f"Python {self.python_version.major}.{self.python_version.minor} trop ancien. Python 3.8+ requis."
        
        return True, "Syst√®me compatible"

class DeploymentManager:
    """Gestionnaire principal du d√©ploiement"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.system_info = SystemInfo()
        self.config = {}
        self.steps = [
            "V√©rification du syst√®me",
            "Installation des pr√©requis syst√®me", 
            "Installation Python et Node.js",
            "Installation et configuration MongoDB",
            "Configuration de l'environnement",
            "Installation des d√©pendances de l'application",
            "Configuration du serveur web (Nginx)",
            "Cr√©ation des services systemd",
            "D√©ploiement de l'application",
            "Tests de fonctionnement",
            "Optimisations finales"
        ]
        
    def welcome(self):
        """Affiche le message de bienvenue"""
        print_header("VOTE SECRET v2.0 - D√âPLOIEMENT PRODUCTION")
        print(f"{Colors.CYAN}üöÄ Assistant de d√©ploiement automatis√© pour serveur de production{Colors.ENDC}")
        print(f"{Colors.CYAN}Ce script va installer et configurer automatiquement Vote Secret sur votre serveur.{Colors.ENDC}\n")
        
        print_info("Informations syst√®me d√©tect√©es :")
        print(f"  ‚Ä¢ Syst√®me: {self.system_info.os_name.title()} {self.system_info.os_version}")
        print(f"  ‚Ä¢ Distribution: {self.system_info.distro or 'Inconnue'}")
        print(f"  ‚Ä¢ Architecture: {self.system_info.architecture}")
        print(f"  ‚Ä¢ Python: {self.system_info.python_version.major}.{self.system_info.python_version.minor}.{self.system_info.python_version.micro}")
        print(f"  ‚Ä¢ Privil√®ges: {'Root (sudo)' if self.system_info.is_root else 'Utilisateur standard'}")
        
        print(f"\n{Colors.WARNING}‚ö†Ô∏è  ATTENTION: Ce script va modifier la configuration syst√®me !{Colors.ENDC}")
        print(f"{Colors.WARNING}   Assurez-vous d'avoir une sauvegarde et les droits administrateur.{Colors.ENDC}")
        
        if not prompt_continue("√ätes-vous pr√™t √† commencer le d√©ploiement ?"):
            print_info("D√©ploiement annul√© par l'utilisateur.")
            sys.exit(0)
    
    def step_1_system_check(self) -> bool:
        """√âtape 1: V√©rification du syst√®me"""
        print_step(1, len(self.steps), "V√©rification du syst√®me")
        
        # V√©rification de la compatibilit√©
        is_supported, message = self.system_info.is_supported()
        if not is_supported:
            print_error(f"Syst√®me incompatible: {message}")
            print_info("D√©ploiement impossible sur ce syst√®me.")
            return False
        
        print_success(message)
        
        # V√©rification des privil√®ges
        if not self.system_info.is_root:
            print_warning("Script ex√©cut√© sans privil√®ges root.")
            print_info("Certaines √©tapes n√©cessiteront 'sudo'. Assurez-vous d'avoir les droits.")
            
            # Test sudo
            success, _, _ = run_command("sudo -n true", "Test des privil√®ges sudo", check_success=False)
            if not success:
                print_warning("Sudo sans mot de passe non configur√©.")
                print_info("Vous devrez saisir votre mot de passe pendant l'installation.")
        
        # V√©rification de l'espace disque
        success, stdout, _ = run_command("df -h /", "V√©rification espace disque", check_success=False)
        if success:
            lines = stdout.split('\n')
            if len(lines) > 1:
                disk_info = lines[1].split()
                if len(disk_info) > 3:
                    available = disk_info[3]
                    print_info(f"Espace disque disponible: {available}")
                    
                    # Extraire la valeur num√©rique (approximative)
                    try:
                        size_str = available.replace('G', '').replace('M', '').replace('K', '')
                        if 'G' in available:
                            size_gb = float(size_str)
                            if size_gb < 5:
                                print_warning(f"Espace disque faible: {available}. Recommand√©: 5GB+")
                        elif 'M' in available:
                            print_warning(f"Espace disque tr√®s faible: {available}. Recommand√©: 5GB+")
                    except:
                        pass
        
        # V√©rification de la m√©moire
        success, stdout, _ = run_command("free -h", "V√©rification m√©moire RAM", check_success=False)
        if success:
            lines = stdout.split('\n')
            for line in lines:
                if 'Mem:' in line:
                    mem_info = line.split()
                    if len(mem_info) > 1:
                        total_mem = mem_info[1]
                        print_info(f"M√©moire RAM totale: {total_mem}")
                        break
        
        # V√©rification des ports
        ports_to_check = [80, 443, 3000, 8001, 27017]
        print_info("V√©rification des ports requis...")
        
        for port in ports_to_check:
            success, stdout, _ = run_command(f"netstat -tuln | grep :{port}", f"Port {port}", check_success=False)
            if success and stdout:
                print_warning(f"Port {port} d√©j√† utilis√©. Cela pourrait causer des conflits.")
        
        print_success("V√©rification syst√®me termin√©e")
        return prompt_continue()
    
    def step_2_system_prerequisites(self) -> bool:
        """√âtape 2: Installation des pr√©requis syst√®me"""
        print_step(2, len(self.steps), "Installation des pr√©requis syst√®me")
        
        # Mise √† jour du syst√®me
        if self.system_info.distro in ['ubuntu', 'debian']:
            commands = [
                ("sudo apt update", "Mise √† jour de la liste des paquets"),
                ("sudo apt upgrade -y", "Mise √† jour du syst√®me"),
                ("sudo apt install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release", "Installation des outils de base")
            ]
        elif self.system_info.distro in ['centos', 'rhel', 'rocky', 'almalinux']:
            commands = [
                ("sudo yum update -y", "Mise √† jour du syst√®me"),
                ("sudo yum install -y curl wget gnupg2 yum-utils", "Installation des outils de base")
            ]
        elif self.system_info.distro == 'fedora':
            commands = [
                ("sudo dnf update -y", "Mise √† jour du syst√®me"),  
                ("sudo dnf install -y curl wget gnupg2", "Installation des outils de base")
            ]
        else:
            print_error(f"Distribution {self.system_info.distro} non support√©e pour cette √©tape")
            return False
        
        for command, description in commands:
            success, _, _ = run_command(command, description)
            if not success:
                print_error(f"√âchec: {description}")
                if not prompt_continue("Ignorer cette erreur et continuer ?"):
                    return False
        
        print_success("Pr√©requis syst√®me install√©s")
        return prompt_continue()
    
    def step_3_python_nodejs(self) -> bool:
        """√âtape 3: Installation Python et Node.js"""
        print_step(3, len(self.steps), "Installation Python et Node.js")
        
        # V√©rification Python actuel
        success, stdout, _ = run_command("python3 --version", "V√©rification Python3")
        if success:
            print_info(f"Python3 d√©tect√©: {stdout}")
        
        # Installation Python 3.11+ si n√©cessaire
        if self.system_info.python_version < (3, 11):
            print_warning("Python 3.11+ recommand√© pour Vote Secret")
            
            if self.system_info.distro in ['ubuntu', 'debian']:
                commands = [
                    ("sudo apt install -y python3.11 python3.11-venv python3.11-dev python3-pip", "Installation Python 3.11")
                ]
            else:
                print_info("Installation manuelle de Python 3.11+ recommand√©e sur cette distribution")
        
        # Installation pip et outils Python
        python_commands = [
            ("sudo apt install -y python3-pip python3-venv python3-dev build-essential", "Installation outils Python") if self.system_info.distro in ['ubuntu', 'debian'] else
            ("sudo yum install -y python3-pip python3-devel gcc gcc-c++ make", "Installation outils Python")
        ]
        
        for command, description in python_commands:
            success, _, _ = run_command(command, description)
            if not success:
                print_warning(f"Erreur: {description}")
        
        # Installation Node.js 20+
        print_info("Installation de Node.js 20.x...")
        
        if self.system_info.distro in ['ubuntu', 'debian']:
            node_commands = [
                ("curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -", "Ajout du d√©p√¥t NodeSource"),
                ("sudo apt install -y nodejs", "Installation Node.js 20.x")
            ]
        elif self.system_info.distro in ['centos', 'rhel', 'rocky', 'almalinux']:
            node_commands = [
                ("curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -", "Ajout du d√©p√¥t NodeSource"),
                ("sudo yum install -y nodejs", "Installation Node.js 20.x")
            ]
        elif self.system_info.distro == 'fedora':
            node_commands = [
                ("curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -", "Ajout du d√©p√¥t NodeSource"),
                ("sudo dnf install -y nodejs", "Installation Node.js 20.x")
            ]
        
        for command, description in node_commands:
            success, _, _ = run_command(command, description)
            if not success:
                print_error(f"√âchec: {description}")
                return False
        
        # Installation Yarn
        success, _, _ = run_command("sudo npm install -g yarn", "Installation Yarn")
        if not success:
            print_warning("Erreur installation Yarn, mais peut continuer avec npm")
        
        # V√©rification des versions install√©es
        success, stdout, _ = run_command("node --version", "V√©rification Node.js")
        if success:
            print_success(f"Node.js install√©: {stdout}")
        
        success, stdout, _ = run_command("npm --version", "V√©rification npm")
        if success:
            print_success(f"npm install√©: {stdout}")
        
        success, stdout, _ = run_command("yarn --version", "V√©rification Yarn", check_success=False)
        if success:
            print_success(f"Yarn install√©: {stdout}")
        
        return prompt_continue()
    
    def step_4_mongodb(self) -> bool:
        """√âtape 4: Installation et configuration MongoDB"""
        print_step(4, len(self.steps), "Installation et configuration MongoDB")
        
        print_info("Installation de MongoDB 8.0...")
        
        if self.system_info.distro in ['ubuntu', 'debian']:
            mongo_commands = [
                ("curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg --dearmor", "Ajout de la cl√© GPG MongoDB"),
                (f"echo 'deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/{self.system_info.distro} $(lsb_release -cs)/mongodb-org/8.0 multiverse' | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list", "Ajout du d√©p√¥t MongoDB"),
                ("sudo apt update", "Mise √† jour des sources"),
                ("sudo apt install -y mongodb-org", "Installation MongoDB")
            ]
        elif self.system_info.distro in ['centos', 'rhel', 'rocky', 'almalinux']:
            # Cr√©er le fichier repo MongoDB
            repo_content = """[mongodb-org-8.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/8.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://www.mongodb.org/static/pgp/server-8.0.asc"""
            
            success, _, _ = run_command(f"echo '{repo_content}' | sudo tee /etc/yum.repos.d/mongodb-org-8.0.repo", "Cr√©ation du fichier repo MongoDB")
            if not success:
                print_error("Erreur cr√©ation du repo MongoDB")
                return False
            
            mongo_commands = [
                ("sudo yum install -y mongodb-org", "Installation MongoDB")
            ]
        elif self.system_info.distro == 'fedora':
            mongo_commands = [
                ("sudo dnf install -y mongodb mongodb-server", "Installation MongoDB")
            ]
        
        for command, description in mongo_commands:
            success, _, _ = run_command(command, description)
            if not success:
                print_error(f"√âchec: {description}")
                print_info("Vous pouvez installer MongoDB manuellement ou utiliser MongoDB Atlas")
                if not prompt_continue("Continuer sans MongoDB local ?"):
                    return False
                break
        else:
            # Configuration et d√©marrage MongoDB
            config_commands = [
                ("sudo systemctl start mongod", "D√©marrage MongoDB"),
                ("sudo systemctl enable mongod", "Activation au d√©marrage MongoDB"),
                ("sudo systemctl status mongod", "V√©rification statut MongoDB")
            ]
            
            for command, description in config_commands:
                success, _, _ = run_command(command, description, check_success=False)
                if success and "status" in command:
                    print_success("MongoDB d√©marr√© et actif")
                elif not success and "start" in command:
                    print_warning("Erreur d√©marrage MongoDB - v√©rification manuelle requise")
        
        return prompt_continue()
    
    def run(self):
        """Ex√©cute le processus complet de d√©ploiement"""
        try:
            self.welcome()
            
            # Ex√©cution s√©quentielle des √©tapes
            steps_methods = [
                self.step_1_system_check,
                self.step_2_system_prerequisites,
                self.step_3_python_nodejs,
                self.step_4_mongodb,
                # Les autres √©tapes seront ajout√©es dans les scripts s√©par√©s
            ]
            
            for i, step_method in enumerate(steps_methods, 1):
                if not step_method():
                    print_error(f"√âtape {i} √©chou√©e ou interrompue par l'utilisateur")
                    print_info("D√©ploiement arr√™t√©")
                    sys.exit(1)
            
            print_header("SUITE DU D√âPLOIEMENT")
            print(f"{Colors.GREEN}‚úÖ Pr√©requis syst√®me install√©s avec succ√®s !{Colors.ENDC}")
            print(f"{Colors.CYAN}Les √©tapes suivantes seront disponibles dans les scripts compl√©mentaires :{Colors.ENDC}")
            print("  ‚Ä¢ deploy_environment.py - Configuration environnement")
            print("  ‚Ä¢ deploy_nginx.py - Configuration serveur web")
            print("  ‚Ä¢ deploy_systemd.py - Services syst√®me")
            print("  ‚Ä¢ deploy_application.py - D√©ploiement application")
            print("  ‚Ä¢ deploy_optimize.py - Optimisations finales")
            
            print(f"\n{Colors.BLUE}Ex√©cutez ces scripts dans l'ordre pour terminer le d√©ploiement.{Colors.ENDC}")
            
        except KeyboardInterrupt:
            print(f"\n\n{Colors.WARNING}D√©ploiement interrompu par l'utilisateur.{Colors.ENDC}")
            sys.exit(1)
        except Exception as e:
            print_error(f"Erreur inattendue: {str(e)}")
            sys.exit(1)

def main():
    """Point d'entr√©e principal"""
    if len(sys.argv) > 1 and sys.argv[1] in ['--help', '-h']:
        print("Vote Secret v2.0 - Assistant de D√©ploiement Production")
        print("Usage: python3 deploy.py")
        print("\nCe script installe automatiquement Vote Secret sur un serveur de production.")
        print("Il configure tous les pr√©requis syst√®me et pr√©pare l'environnement.")
        return
    
    if os.geteuid() == 0:
        print_error("Ne pas ex√©cuter ce script en tant que root !")
        print_info("Ex√©cutez avec un utilisateur sudo : python3 deploy.py")
        sys.exit(1)
    
    deployment = DeploymentManager()
    deployment.run()

if __name__ == "__main__":
    main()