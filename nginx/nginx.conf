# SUPER Vote Secret - Nginx Production Configuration
# Ultra-robust HTTPS configuration with multiple fallbacks

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_realip_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
                   
    log_format health '$time_local - Health check from $remote_addr - $status';
    
    access_log /var/log/nginx/access.log main buffer=16k flush=5s;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 20M;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Buffer settings
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_disable "msie6";
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=global:10m rate=100r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Real IP detection (for proxies/CDN)
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;
    set_real_ip_from fc00::/7;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # SSL configuration (will be used by HTTPS servers)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers (applied to all servers)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # Upstreams with health checks and load balancing
    upstream backend {
        least_conn;
        server backend:8001 max_fails=3 fail_timeout=30s weight=1;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream frontend {
        least_conn;  
        server frontend:3000 max_fails=3 fail_timeout=30s weight=1;
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Map for SSL redirect logic
    map $scheme $ssl_redirect {
        default 0;
        http $ssl_available;
    }
    
    map $ssl_available $ssl_available {
        default 0;
    }

    # HTTP Server - Always accessible with smart HTTPS redirect
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Set SSL availability (checked by file existence)
        set $ssl_available 0;
        if (-f /etc/letsencrypt/live/default/fullchain.pem) {
            set $ssl_available 1;
        }

        # Rate limiting
        limit_req zone=global burst=50 nodelay;
        limit_conn addr 20;

        # Health check - always accessible
        location = /health {
            access_log /var/log/nginx/access.log health;
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header X-Health-Check "nginx-http";
            return 200 'healthy\n';
        }

        # Let's Encrypt ACME Challenge - always accessible
        location ^~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
            access_log off;
            log_not_found off;
            
            # Security for ACME challenge
            location ~ \.php$ { deny all; }
            location ~ /\. { deny all; }
        }

        # API routes - accessible via HTTP with optional HTTPS redirect
        location /api/ {
            # Smart redirect: only if SSL is available
            if ($ssl_available = 1) {
                return 301 https://$host$request_uri;
            }
            
            # Rate limiting for API
            limit_req zone=api burst=30 nodelay;
            
            # Proxy to backend
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # WebSocket support - accessible via HTTP with optional HTTPS redirect  
        location /ws {
            # Smart redirect: only if SSL is available
            if ($ssl_available = 1) {
                return 301 https://$host$request_uri;
            }
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;
        }

        # Frontend - accessible via HTTP with optional HTTPS redirect
        location / {
            # Smart redirect: only if SSL is available
            if ($ssl_available = 1) {
                return 301 https://$host$request_uri;
            }
            
            # Rate limiting
            limit_req zone=global burst=20 nodelay;
            
            # Proxy to frontend
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Caching for static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://frontend;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options "nosniff";
                access_log off;
                
                # Gzip for text-based assets
                gzip_static on;
            }
        }

        # Security: Block sensitive files
        location ~ /\.|~$|\.bak$|\.tmp$|\.log$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # HTTPS Server - Enhanced security
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        # SSL certificates with fallback
        ssl_certificate /etc/letsencrypt/live/default/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/default/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/default/chain.pem;
        
        # Additional SSL security
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        
        # Enhanced security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: blob: https:; font-src 'self' data:; connect-src 'self' wss: ws: https:; worker-src 'self' blob:; object-src 'none'; base-uri 'self'; form-action 'self';" always;

        # Rate limiting
        limit_req zone=global burst=100 nodelay;
        limit_conn addr 50;

        # Health check
        location = /health {
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header X-Health-Check "nginx-https";
            return 200 'secure\n';
            access_log off;
        }

        # API routes with enhanced security
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # Enhanced timeouts for HTTPS
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 15s;
        }

        # WebSocket with SSL
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;
        }

        # Frontend with caching optimization
        location / {
            limit_req zone=global burst=30 nodelay;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_cache_bypass $http_upgrade;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Enhanced static file caching for HTTPS
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff";
            access_log off;
            
            # Precompressed content
            gzip_static on;
            
            # Security for static assets
            add_header X-Frame-Options "DENY";
        }

        # Security: Enhanced blocking
        location ~ /\.|~$|\.bak$|\.tmp$|\.log$|\.env$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
    }

    # Fallback HTTPS server with self-signed certificate
    server {
        listen 8443 ssl http2;
        listen [::]:8443 ssl http2;
        server_name _;

        # Self-signed certificates
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

        # Basic SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers off;

        location /health {
            add_header Content-Type text/plain;
            add_header X-Health-Check "nginx-fallback-ssl";
            return 200 'fallback-ssl-healthy\n';
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }
}