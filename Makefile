# SUPER Vote Secret - Makefile pour simplifier les op√©rations Docker
# Usage: make [command]

# Variables
COMPOSE_FILE = docker-compose.yml
PROJECT_NAME = vote-secret

# Couleurs pour les messages
YELLOW = \033[1;33m
GREEN = \033[1;32m
RED = \033[1;31m
BLUE = \033[1;34m
NC = \033[0m # No Color

.PHONY: help install dev prod quick stop clean logs status restart backup restore

# Commande par d√©faut
help: ## Afficher cette aide
	@echo "$(BLUE)üó≥Ô∏è  SUPER Vote Secret - Commandes Make$(NC)"
	@echo "$(YELLOW)‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""

# === D√âPLOIEMENT ===

install: ## D√©ploiement complet interactif avec configuration
	@echo "$(BLUE)üöÄ D√©ploiement SUPER Vote Secret$(NC)"
	./deploy-optimized.sh

dev: ## D√©ploiement rapide mode d√©veloppement 
	@echo "$(BLUE)üîß D√©ploiement mode d√©veloppement$(NC)"
	@echo -e "2\ny" | ./deploy-optimized.sh

prod: ## D√©ploiement production avec SSL
	@echo "$(BLUE)üè≠ D√©ploiement mode production$(NC)"
	@echo -e "1" | ./deploy-optimized.sh

quick: ## D√©marrage rapide avec config existante
	@echo "$(BLUE)‚ö° D√©marrage rapide$(NC)"
	@if [ -f ".env" ]; then \
		docker compose up -d --build; \
		echo "$(GREEN)‚úÖ Application d√©marr√©e avec la config existante$(NC)"; \
	else \
		echo "$(RED)‚ùå Fichier .env manquant - utilisez 'make install' d'abord$(NC)"; \
		exit 1; \
	fi

# === GESTION DES SERVICES ===

start: ## D√©marrer tous les services
	@echo "$(BLUE)‚ñ∂Ô∏è  D√©marrage des services...$(NC)"
	docker compose up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

stop: ## Arr√™ter tous les services
	@echo "$(BLUE)‚èπÔ∏è  Arr√™t des services...$(NC)"
	docker compose down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: ## Red√©marrer tous les services
	@echo "$(BLUE)üîÑ Red√©marrage des services...$(NC)"
	docker compose restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

# === MONITORING ET DEBUGGING ===

status: ## Afficher le statut des services
	@echo "$(BLUE)üìä Statut des services:$(NC)"
	@docker compose ps
	@echo ""
	@echo "$(BLUE)üåê Tests d'accessibilit√©:$(NC)"
	@curl -s http://localhost/api/health 2>/dev/null && echo "$(GREEN)‚úÖ API accessible$(NC)" || echo "$(RED)‚ùå API non accessible$(NC)"
	@curl -s http://localhost 2>/dev/null | grep -q "Vote Secret" && echo "$(GREEN)‚úÖ Frontend accessible$(NC)" || echo "$(RED)‚ùå Frontend non accessible$(NC)"

logs: ## Afficher les logs en temps r√©el
	@echo "$(BLUE)üìã Logs en temps r√©el (Ctrl+C pour quitter):$(NC)"
	docker compose logs -f --tail=100

logs-backend: ## Logs du backend uniquement
	@echo "$(BLUE)üìã Logs Backend:$(NC)"
	docker compose logs -f backend

logs-frontend: ## Logs du frontend uniquement
	@echo "$(BLUE)üìã Logs Frontend:$(NC)"
	docker compose logs -f frontend

logs-nginx: ## Logs du nginx uniquement
	@echo "$(BLUE)üìã Logs Nginx:$(NC)"
	docker compose logs -f nginx

health: ## V√©rification compl√®te de sant√©
	@echo "$(BLUE)üè• V√©rification de sant√© compl√®te:$(NC)"
	@echo ""
	@echo "$(BLUE)üê≥ Conteneurs Docker:$(NC)"
	@docker compose ps
	@echo ""
	@echo "$(BLUE)üåê Endpoints:$(NC)"
	@curl -s -w "%{http_code}\n" -o /dev/null http://localhost/api/health && echo "$(GREEN)‚úÖ API Health: OK$(NC)" || echo "$(RED)‚ùå API Health: √âCHEC$(NC)"
	@curl -s -w "%{http_code}\n" -o /dev/null http://localhost && echo "$(GREEN)‚úÖ Frontend: OK$(NC)" || echo "$(RED)‚ùå Frontend: √âCHEC$(NC)"

# === MAINTENANCE ===

clean: ## Nettoyer les conteneurs et volumes
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION: Cette action supprimera tous les conteneurs et volumes$(NC)"
	@read -p "√ätes-vous s√ªr ? [y/N]: " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		echo "$(BLUE)üßπ Nettoyage en cours...$(NC)"; \
		docker compose down -v --remove-orphans; \
		docker system prune -f; \
		echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"; \
	else \
		echo "$(BLUE)‚ÑπÔ∏è  Nettoyage annul√©$(NC)"; \
	fi

rebuild: ## Reconstruire et red√©marrer
	@echo "$(BLUE)üî® Reconstruction et red√©marrage...$(NC)"
	docker compose down
	docker compose build --no-cache
	docker compose up -d
	@echo "$(GREEN)‚úÖ Reconstruction termin√©e$(NC)"

update: ## Mettre √† jour et reconstruire
	@echo "$(BLUE)üì¶ Mise √† jour des images...$(NC)"
	docker compose pull
	docker compose build --pull
	docker compose up -d
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

# === SAUVEGARDE ===

backup: ## Cr√©er une sauvegarde des donn√©es
	@echo "$(BLUE)üíæ Cr√©ation d'une sauvegarde...$(NC)"
	@BACKUP_DATE=$$(date +%Y%m%d_%H%M%S); \
	mkdir -p backups; \
	docker compose exec -T mongodb mongodump --authenticationDatabase admin -u admin -p $(shell grep MONGO_ROOT_PASSWORD .env | cut -d '=' -f2) --archive=/tmp/backup.gz --gzip; \
	docker cp $$(docker compose ps -q mongodb):/tmp/backup.gz backups/mongodb_backup_$$BACKUP_DATE.gz; \
	tar -czf backups/config_backup_$$BACKUP_DATE.tar.gz .env frontend/.env backend/.env docker-compose.yml; \
	echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e: backups/*_$$BACKUP_DATE.*$(NC)"

# === D√âVELOPPEMENT ===

shell-backend: ## Shell dans le conteneur backend
	docker compose exec backend bash

shell-frontend: ## Shell dans le conteneur frontend
	docker compose exec frontend bash

shell-mongodb: ## Shell MongoDB
	docker compose exec mongodb mongosh -u admin -p $(shell grep MONGO_ROOT_PASSWORD .env | cut -d '=' -f2) --authenticationDatabase admin

# === SSL ===

ssl-status: ## V√©rifier le statut SSL
	@echo "$(BLUE)üîí Statut SSL:$(NC)"
	@if [ -f ".env" ] && grep -q "SSL_ENABLED=true" .env; then \
		docker compose logs certbot | tail -10; \
	else \
		echo "$(YELLOW)‚ÑπÔ∏è  SSL d√©sactiv√© dans la configuration$(NC)"; \
	fi

ssl-renew: ## Renouveler les certificats SSL
	@echo "$(BLUE)üîÑ Renouvellement SSL...$(NC)"
	docker compose restart certbot
	docker compose logs -f certbot

# === TESTS ===

test: ## Lancer les tests de l'application
	@echo "$(BLUE)üß™ Tests de l'application...$(NC)"
	./test-docker-build.sh

test-api: ## Tester l'API backend
	@echo "$(BLUE)üîß Test de l'API...$(NC)"
	@curl -s http://localhost:8001/api/health | jq . || curl -s http://localhost:8001/api/health

# === INFORMATIONS ===

info: ## Afficher les informations du syst√®me
	@echo "$(BLUE)‚ÑπÔ∏è  Informations syst√®me:$(NC)"
	@echo "‚Ä¢ Docker: $$(docker --version)"
	@echo "‚Ä¢ Docker Compose: $$(docker compose version)"
	@echo "‚Ä¢ Espace disque: $$(df -h . | awk 'NR==2 {print $$4}') disponible"
	@echo "‚Ä¢ M√©moire: $$(free -h | awk 'NR==2{printf "%.1f/%.1f GB", $$3/1024, $$2/1024}')"
	@if [ -f ".env" ]; then \
		echo "‚Ä¢ Domaine configur√©: $$(grep DOMAIN .env | cut -d '=' -f2)"; \
		echo "‚Ä¢ Mode SSL: $$(grep SSL_ENABLED .env | cut -d '=' -f2)"; \
	fi

urls: ## Afficher les URLs d'acc√®s
	@echo "$(BLUE)üåê URLs d'acc√®s:$(NC)"
	@if [ -f ".env" ]; then \
		DOMAIN=$$(grep DOMAIN .env | cut -d '=' -f2); \
		SSL_ENABLED=$$(grep SSL_ENABLED .env | cut -d '=' -f2); \
		echo "‚Ä¢ Application: http://$$DOMAIN"; \
		[ "$$SSL_ENABLED" = "true" ] && echo "‚Ä¢ HTTPS: https://$$DOMAIN"; \
		echo "‚Ä¢ API: http://$$DOMAIN/api"; \
		echo "‚Ä¢ Local: http://localhost"; \
	else \
		echo "$(RED)‚ùå Configuration non trouv√©e - lancez 'make install'$(NC)"; \
	fi